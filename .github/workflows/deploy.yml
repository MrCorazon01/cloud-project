name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Container Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          docker build -t my-app:${{ github.sha }} .

      - name: List Docker Images (Debugging Step)
        run: |
          docker images

      - name: Save Docker Image as Artifact
        run: |
          docker save my-app:${{ github.sha }} -o my-app.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: my-app.tar

  push:
    name: Push to Amazon ECR
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker Image
        run: |
          docker load < my-app.tar

      - name: List Docker Images (Post Load)
        run: |
          docker images

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR repository (if it doesn't exist)
        run: |
          aws ecr describe-repositories --repository-names my-app --region ${{ secrets.AWS_REGION }} || aws ecr create-repository --repository-name my-app --region ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push Docker Image to ECR
        run: |
          docker tag my-app:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:${{ github.sha }}

  deploy:
    name: Deploy to Amazon ECS
    needs: push
    runs-on: ubuntu-latest
    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR repository (if it doesn't exist)
        run: |
          aws ecr describe-repositories --repository-names my-app --region ${{ secrets.AWS_REGION }} || aws ecr create-repository --repository-name my-app --region ${{ secrets.AWS_REGION }}

      - name: Push Docker Image to ECR
        run: |
          docker tag my-app:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:${{ github.sha }}

      - name: Deploy to ECS
        run: |
          ecs_task_definition=$(aws ecs register-task-definition --family my-app-task --network-mode awsvpc --container-definitions '[{"name": "my-app", "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:${{ github.sha }}", "memory": 512, "cpu": 256, "essential": true}]' --region ${{ secrets.AWS_REGION }} | jq -r .taskDefinition.taskDefinitionArn)
          aws ecs update-service --cluster my-app-cluster --service my-app-service --task-definition $ecs_task_definition --region ${{ secrets.AWS_REGION }}
